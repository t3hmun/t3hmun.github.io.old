/**** t3hmun's educational base scss file.
 *
 * The job of this file is to define the appearance and feel of basic HTML elements using CSS.
 * This is by no means a normal quantity of comments.
 * The comments are extra verbose for educational purposes.
 * Written by someone who last used HTML and CSS over a decade ago. 
 *

__educational interlude__

> For those that have not encounted SASS before, it's not complicated read on:

## SASS extension to CSS

One may notice that most sizes and colours are set using variables.
These variables are a feature of SASS.
The values for these variables are all defined in the `main.scss` file.
SASS is an extension of CSS that outputs into CSS (a sort of meta-language).
CSS tends to get ridiculously oversized and complicated these days.
SASS lets us abstract away a lot of this with variables and a bunch of other features;
 especially tacking the cases where CSS is tediously repetitive.


> For those that are new to CSS, the following is worth understanding:

## Margin VS Padding

Margins can overlap (only vertically in block elements) and are external to the element.
Paddings do not overlap and are internal to the element.
As a result margins only ensure a minimum distance between two elements.
So if 2 elements have a 10px and 15px margin respectively, the gap between them would be 15px.
If padding was used instead the gap would be 25 px.


## Inline Elements vs Block Elements

 * Inline elements appear within the normal flow of a sentence.
 * They are positioned by text alignment.
 * Most inline elements are just tags that format text (like <b>).
 * Their size is generally defined by their content.

 * Block elements are not affected by alignment.
 * Unless their size is defined they fill all available free space.
 * Positioned using their margins.
 * They can be made floating...

CSS can be used to change a block to a inline and vice versa, but this tends to get messy.

__end of intuerlude__

****/

/* Everything visible is a child of body. This forms the basic default for everything.
 * The header and footer are located inside the body (Header and footer are new HTML5 tags).
 * The HTML head (not header) is mainly just meta tags and configuration. */
body {
    font-family: $base-font-family;
    font-size: $base-font-size;
    line-height: $base-line-height;
    font-weight: $body-font-weight;
    color: $text-colour;
    background-color: $background-colour;

    /* Source Sans kerning is a tad tight so adding a bit of extra space. 
       This does mean that other font segments will need to reset the spacing. */
    letter-spacing: $letter-spacing-adjustment;

    /* Everything lacking its own alignment will be centred (primarily header and footer). */
    text-align: center;
}

/* This is a new HTML 5 tag. Refers to a block of content that can be understood independently.
 * For our purposes it is the main content body of a page; the bit between the header and footer. */
article {
    /* Block elements are centred by setting their margins to auto.
     * Only inline elements respond to text-alignment.*/
    margin-left: auto;
    margin-right: auto;

    /* The only inline text in this blog are headings and the date.
     * The rest of the text are contained in <p> <blockquote> or <pre> tags,
     *  which are all blocks with their own internal alignment. */
    text-align: left;

    /* Here we configure the maximum width we want to allow content to consume. */
    max-width: $article-width;
}

/* P for Paragraph. This should only be used for heavy blocks of reading text.
 * Other quantities of text should use other tags. */
p {
    font-family: $p-font-family;
    font-size: $p-font-size;
    line-height: $base-line-height;
    font-weight: $body-font-weight;
    /* Justify for glorious newspaper quality reading. */
    text-align: justify;
    /* Reading width is meant to be the maximum comfortable text block width.
     * The ideal heavy reading width is meant to be rather narrow 
      * (I'm thinking newspapers and academic articles where the information is easy to scan).
     * However its nice to have pictures and lighter text blocks exploit more space,
     *  hence the bigger size of $article-width. */
    max-width: $reading-width;
    /* Auto side margins to centre the p block in the screen.
     * Extra margin at bottom for end of paragraph. */
    margin: $standard-margin auto $endpara-margin;
    /* This is required to stop the text from hugging the edge of the screen. A tiny gutter. */
    padding: 0 $standard-side-margin;

    /* This is important to prevent this block from wrapping / appearing-next-to floating elements. */
    clear: both;
}

blockquote {
    font-family: $p-font-family;
    font-size: $p-font-size;
    line-height: $base-line-height;
    font-weight: $body-font-weight;
    /* The side line to indicate a blockquote. */
    border-left: $thick-line solid $subtle-colour;
    /* This tiny bit of padding separates the tiers of blockquotes. */
    padding-left: $standard-side-margin;
    /* Centre the block. */
    margin: 0 auto;
    /* Give the blockquote slightly more space than standard text.  */
    max-width: $blockq-width;
    /* Avoid troublesome interaction with floating elements. */
    clear: both;
    /* A unique background to mark out the area. */
    background: $blockq-background;

    /* Set some features that may be set differently on some browsers. */
    outline:0;
    font-size:100%;
    vertical-align:baseline;
    quotes:none;

    /* All the text in a blockquote is also put in p tags.
     * This overrides the width of p elements that are direct children of blockquote elements.
     * Without this the text would revert to being restrained by the p max-width setting. */
    >p {
        max-width: $blockq-width;
    }
}

/* The list tag, general settings for lists. */
ul {
    font-family: $p-font-family;
    font-size: $p-font-size;
    line-height: $base-line-height;
    font-weight: $body-font-weight;
    /* No browser generated bullet points.
     * Each of the browsers generate bullet shapes differently so I prefer to create them using text (see li:before). */
    list-style: none;
    text-align: justify;
    padding:0;
    margin-top: $standard-margin;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: $endpara-margin;

    /* Bullet point lists are easier to read when given more horizontal space. */
    max-width: $bullet-width;

    /* Since the bullet list is deviating from the standard text width its nice to demark it with a custom background. */
    background: $bullet-background;
    border-radius: $standard-radius;

}

/* Individual list item. */
li {
    /* Using percentage makes it squash nicely on small displays.
     * I can't explain the relationship between padding-left and text-indent. */
    padding-left: $bullet-indent;
    padding-right: $standard-margin;

    /* DO NOT add a negative text indent. Child inline block will inherit and lose their formatting. */

    /* I just like the look of these lines between top level blocks. */
    /*border-bottom: $medium-line solid $background-colour;
*/
    >ul {
        >li{
            border-bottom: none;
        }
    }
}

/* This inserts the content character to use as a bullet point. */
li:before {
    padding-right:$bullet-text-gap;
    content: "\2022"; /* \2022 is the code for UTF-8 bullet point */
    color: $strong-colour;
    font-weight: $bullet-weight;
}

/* Define the sub-list bullet point. */
li li:before {
    padding-right:$bullet-text-gap;
    content: "-";
    color: $strong-colour;
}

/* Img
 * Stops images being wider than the window.
 * Prevents the image stretching the area or flowing out of it. */
img {
    max-width: 100%;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    font-weight: $header-weight;

    margin: $standard-margin $standard-side-margin $endpara-margin;
    padding: 0;
    /* This is different in h1. */
    border-bottom: $thin-line solid $very-subtle-colour;

    /* Avoid troublesome interaction with floating elements. */
    clear: both;

    &.post-title{
        color: $highlight-colour;
        border-bottom: $thin-line solid $subtle-colour;
    }

    &.index-title{
        margin: 0;
        margin-left: $standard-side-margin;
        color: $highlight-colour;
        border-bottom: none;
    }
}

/* Sets the size and allows bottom-border to appear behind decenders
 * I want the bottom bits of lettlers lige g and p to cross the line. */
h1 {
    font-size: $base * $h1-size-coef;
    line-height: $base * $h1-size-coef;
}
h2 {
    font-size: $base * $h2-size-coef;
    line-height: $base * $h2-size-coef;
}
h3 {
    font-size: $base * $h3-size-coef;
    line-height: $base * $h3-size-coef;
}
h4 {
    font-size: $base * $h4-size-coef;
    line-height: $base * $h4-size-coef;
}
h5 {
    font-size: $base * $h5-size-coef;
    line-height: $base * $h5-size-coef;
}
h6 {
    font-size: $base * $h6-size-coef;
    line-height: $base * $h6-size-coef;
}

/* Links. Colour them according to the theme. */
a {
    color: $link-colour;
    text-decoration: none; /* Removes the underline. */

    &:visited {
        color: $visited-colour;
    }

    &:hover {
        color: $text-colour;
        text-decoration: underline;
    }

    &.site-header{
        color: $highlight-colour;
    }
}

.top-nav {
    font-size: $big-font-size;
    font-weight: $header-weight;
    margin: $standard-margin;
    color: $highlight-colour;
}

/* Code formatting - fenced code blocks use the pre tag.
 * The `code` tag is for inline monospace blocks.
 * The `pre` is for large blocks which may be colourised.
 * I have not set a width for the code block.
 * This causes it to automatically fill the article block that it is contained in.
 * Code needs to be given maximum horizontal space. Scrolling or wrapping code is no fun. */
pre,
code {
    /* Reset letter spacing (it can ruin monospace). */
    letter-spacing: 0;
    background-color: $code-background;
    text-align: left;

    /* Set a monospace font.*/
    font-family: $syntax-font-family;

    /* This is for box art :D */
    &.art {
        /* Correct line spacing to make the boxart connect. */
        line-height: 1.38;
        /* Do not allow wrapping that would damage the art. Forces scroll instead. */
        max-width: 90%;
        margin: auto;
    }

    /* The next 2 art tags are inline blocks, they appear next to normal text.  */
    &.art-block-tiny {
        line-height: 1.36;
        max-width: 90%;
        margin: auto;
        background: none;
        border: none;
        display: inline-block;
        vertical-align: middle;
        /* Need to increase weight to prevent lines being anti-aliased into oblivion. */
        font-weight: $medium-weight;

        font-size: $half-font-size;
    }

    &.art-block-small {
        line-height: 1.38;
        max-width: 90%;
        margin: auto;
        background: none;
        border: none;
        display: inline-block;
        vertical-align: middle;
        /* Need to increase weight to prevent lines being anti-aliased into oblivion. */
        font-size: $small-font-size;
    }

    >a{
        &:hover {
            color: $text-colour;
            /* No decoration, underline makes a mess of art. */
            text-decoration: none;
        }
    }
}

/* This is the tag for small inline `code` bits. */
code {
    /* A small amount of padding to void escaping the curved edges */
    padding: 0 $standard-side-margin;
    /* No margins, don't want to disrupt text/line spacing. */
    margin: 0;
    color: $code-colour;
    /* Inline so it can be part of a sentence,
     * Block to prevent line-breaks in the middle. */
    /* display: inline-block; Actually no, too much chaos with justified text. */
    /* Creates neat curved corners. */
    border-radius: $code-radius;
    /* No border it is part of the sentence. */
    border: none;
    display: inline-block;

    &.index-tag {
        font-size: $base * $taglist-size-coef;
        line-height: 130%;
        padding: $base * $taglist-size-coef * 0.12;
        margin: 0;
        vertical-align: middle;
    }
}

pre {
    /* Want the block to be flush with the screen edge but not the text. */
    padding: 0 $standard-side-margin;
    margin: $standard-margin 0;

    border: $thin-line solid $very-subtle-colour;
    border-radius: 0; /* Curves look bad when flussh with sceen edge. */

    /* This gives the code block its own scroll bar.
     * We don't want the code to fall off or stretch the screen. */
    overflow-x: auto;

    /* The code in the pre elements should not have borders and whatnot.
     * The > makes it only apply to code elements that are direct children to
     * pre elements. */
    > code {
        border: 0;
        padding-right: 0;
        padding-left: 0;
    }
}

/* Blocks of normal text in the footer that should stay together. */
.fblock {
    display: inline-block;
}

/* Used for the continued button in the index. */
.right-align {
    text-align: right;
    margin-bottom: $endpara-margin;
}

/* Style for index and recent posts.
 */
.index {
    text-align: left;
    margin: $standard-margin $standard-side-margin;
    margin-bottom: $endpara-margin;
    background: none;
    border-bottom: $thin-line solid $subtle-colour;
    float: left; 
    width: 100%;

    .index-title {
        /* Float so that it appears as a block on the left. */
        float: left;
    }

    .index-info {
        /* Float so that it appears as a block on the right. */
        float: right;
        /* Kicks it to the next line if there is not enough space next to the title. */
        overflow: auto;
        font-family: $p-font-family;
        vertical-align: middle;
        margin: $standard-margin $standard-side-margin;
        margin-bottom: 0;
    }
}

.index-list{
    .index-excerpt {
        /* This prevents it appearing inbetween the title and date. */
        clear: both;
    }
    >.index{
        border-bottom: $thin-line solid $very-subtle-colour;
    }
    
}

